{"version":3,"sources":["Redux/ToDoReducer.ts","Input.tsx","TaskBlock.tsx","ButtonsBlock.tsx","ToDo.tsx","Todos.tsx","App.tsx","serviceWorker.ts","index.tsx","Redux/ReduxStore.ts"],"names":["initialState","tasksTitle","taskBody","Input","props","useState","inputText","setInputText","errorInput","setErrorInput","className","onChange","e","currentTarget","value","onClick","test","dispatch","idTitle","type","addTaskAC","TaskBlock","mapTasks","tasks","map","taskElem","key","id","checked","isDone","callBack","title","deleteTaskAC","ButtonsBlock","filterHandler","filter","onClickHandler","buttonName","CustomButton","ToDo","task","state","useDispatch","onCheckHandler","checkTaskAC","setFilter","updateTodoMode","setUpdateTodoMode","todoName","setTodoName","onMouseLeave","titleName","activeTasks","length","completedTasks","ToDos","useSelector","stateTaskBlock","todos","createNewTodoAC","App","Boolean","window","location","hostname","match","store","rootReducer","combineReducers","action","todoId","v1","newTask","trim","copyState","el","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9f9cff69.chunk.js","sourcesContent":["import {StateType, Task1Type, taskTitle} from \"../Types\";\r\nimport {v1} from 'uuid'\r\n\r\n\r\nconst initialState: StateType = {\r\n    tasksTitle: [] as Array<taskTitle>,\r\n\r\n    taskBody: {\r\n        // [taskIdWhat]: {\r\n        //     activeTasks: [] as Array<Task1Type>,\r\n        //     completedTasks: [] as Array<Task1Type>\r\n        // },\r\n        // [taskIdWho]: {\r\n        //     activeTasks: [] as Array<Task1Type>,\r\n        //     completedTasks: [] as Array<Task1Type>\r\n        // }\r\n    },\r\n}\r\n\r\nexport let taskBlockReducer = (state: StateType = initialState, action: any) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case 'REMOVE-TODO':\r\n            delete state.taskBody[action.idTitle]\r\n            return {\r\n                ...state,\r\n                tasksTitle: state.tasksTitle.filter((title: taskTitle) => title.id != action.idTitle),\r\n            }\r\n\r\n        case 'UPDATE-TODO-NAME':\r\n            debugger\r\n            return {\r\n                ...state,\r\n                tasksTitle: [...state.tasksTitle.map((title: taskTitle) =>\r\n                    title.id !== action.idTitle ?\r\n                        title\r\n                        : {id: action.idTitle, titleName: action.titleName})\r\n                ],\r\n                taskBody: {...state.taskBody}\r\n            }\r\n\r\n        case 'CREATE-NEW-TODO':\r\n            let todoId = v1()\r\n            return {\r\n                ...state,\r\n                tasksTitle: [...state.tasksTitle, {id: todoId, titleName: action.todoName}],\r\n                taskBody: {\r\n                    ...state.taskBody,\r\n                    [todoId]: {\r\n                        activeTasks: [],\r\n                        completedTasks: []\r\n                    }\r\n                }\r\n            }\r\n\r\n        case 'ADD-TASK':\r\n\r\n            let newTask = {\r\n                id: v1(),\r\n                title: action.inputText.trim(),\r\n                isDone: false\r\n            };\r\n\r\n            return {\r\n                ...state,\r\n                tasksTitle: state.tasksTitle,\r\n                taskBody: {\r\n                    ...state.taskBody,\r\n                    [action.idTitle]: {\r\n                        activeTasks: [...state.taskBody[action.idTitle].activeTasks, newTask],\r\n                        completedTasks: [...state.taskBody[action.idTitle].completedTasks]\r\n                    }\r\n                },\r\n                //ты должен страдать от вложенности!!!\r\n\r\n            };\r\n\r\n\r\n        case 'CHECK-TASK':\r\n\r\n            let copyState: StateType = {\r\n                ...state,\r\n                tasksTitle: state.tasksTitle,\r\n                taskBody: {\r\n                    ...state.taskBody,\r\n                    [action.idTitle]: {\r\n                        activeTasks: [\r\n                            ...state.taskBody[action.idTitle].activeTasks.map(task =>\r\n\r\n                                task.id === action.id ?\r\n                                    task.isDone ?\r\n                                        {task, isDone: false} : {...task, isDone: true} : task)\r\n                        ],\r\n                        completedTasks: [\r\n                            ...state.taskBody[action.idTitle].completedTasks.map(task =>\r\n\r\n                                task.id === action.id ?\r\n                                    task.isDone ?\r\n                                        {...task, isDone: false} : {...task, isDone: true} : task)\r\n                        ]\r\n                    }\r\n                }\r\n                ,\r\n            };\r\n\r\n            return {\r\n                ...copyState,\r\n                tasksTitle: copyState.tasksTitle,\r\n                taskBody: {\r\n                    ...copyState.taskBody,\r\n                    [action.idTitle]: {\r\n                        activeTasks: [\r\n                            ...copyState.taskBody[action.idTitle].activeTasks.filter((el: Task1Type) => !el.isDone),\r\n                            ...copyState.taskBody[action.idTitle].completedTasks.filter((el: Task1Type) => !el.isDone)\r\n                        ],\r\n                        completedTasks: [\r\n                            ...copyState.taskBody[action.idTitle].completedTasks.filter((el: Task1Type) => el.isDone),\r\n                            ...copyState.taskBody[action.idTitle].activeTasks.filter((el: Task1Type) => el.isDone)\r\n                        ]\r\n                        //страдааай!!!\r\n                    }\r\n                },\r\n            };\r\n\r\n        case 'DELETE-TASK':\r\n\r\n            return {\r\n                ...state,\r\n                taskBody: {\r\n                    ...state.taskBody,\r\n                    [action.idTitle]: {\r\n                        activeTasks: [...state.taskBody[action.idTitle].activeTasks.filter(task => task.id !== action.id)],\r\n                        completedTasks: [...state.taskBody[action.idTitle].completedTasks.filter(task => task.id !== action.id)]\r\n                    }\r\n                    //не так уж и страшно впринципе\r\n                },\r\n            }\r\n\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\ntype removeTodoACType = { type: typeof REMOVE_TODO, idTitle: string }\r\nconst REMOVE_TODO = 'REMOVE-TODO'\r\nexport const removeTodoAC = (idTitle: string): removeTodoACType => ({type: REMOVE_TODO, idTitle})\r\n\r\n\r\ntype updateTodoNameACType = { type: typeof UPDATE_TODO_NAME, titleName: string, idTitle: string }\r\nconst UPDATE_TODO_NAME = 'UPDATE-TODO-NAME'\r\nexport const updateTodoNameAC = (titleName: string, idTitle: string): updateTodoNameACType =>\r\n    ({type: UPDATE_TODO_NAME, idTitle, titleName})\r\n\r\n\r\ntype createNewTodoACType = { type: typeof CREATE_NEW_TODO, todoName: string }\r\nconst CREATE_NEW_TODO = 'CREATE-NEW-TODO'\r\nexport const createNewTodoAC = (todoName: string): createNewTodoACType => ({type: CREATE_NEW_TODO, todoName})\r\n\r\n\r\ntype deleteTaskACType = { type: typeof DELETE_TASK, id: string, idTitle: string }\r\nconst DELETE_TASK = 'DELETE-TASK'\r\nexport const deleteTaskAC = (id: string, idTitle: string): deleteTaskACType => ({type: DELETE_TASK, id, idTitle})\r\n\r\n\r\ntype  addTaskACType = { type: typeof ADD_TASK, idTitle: string, inputText: string }\r\nconst ADD_TASK = 'ADD-TASK'\r\nexport const addTaskAC = (idTitle: string, inputText: string): addTaskACType => ({type: ADD_TASK, idTitle, inputText})\r\n\r\n\r\nexport type checkTaskACType = { type: typeof CHECK_TASK, id: string, idTitle: string }\r\nconst CHECK_TASK = 'CHECK-TASK'\r\nexport const checkTaskAC = (id: string, idTitle: string): checkTaskACType => ({type: CHECK_TASK, id, idTitle})\r\n\r\n\r\n\r\n","import React, {useState} from \"react\";\r\nimport './App.css';\r\nimport {InputPropsType} from \"./Types\";\r\nimport {addTaskAC} from \"./Redux/ToDoReducer\";\r\n\r\n\r\nexport const Input = (props: InputPropsType) => {\r\n\r\n    const [inputText, setInputText]= useState<string>('')\r\n    const [errorInput, setErrorInput]=useState<boolean>(false)\r\n\r\n    const addTask = () => {\r\n        if ((/^\\s+$/).test(inputText) || inputText === '') {\r\n            setErrorInput(true)\r\n            return\r\n        }\r\n      props.dispatch(addTaskAC(props.idTitle,inputText))\r\n        setInputText('')\r\n    }\r\n\r\n    const ChangeTextTaskTitle = (e:React.ChangeEvent<HTMLInputElement>) => {\r\n        setInputText(e.currentTarget.value)\r\n    }\r\n\r\n    const onclickHandler = () => {\r\n        setInputText('')\r\n        setErrorInput(false)\r\n    }\r\n\r\n    return (\r\n        <div className={errorInput?'error':'notError'}>\r\n            <input onChange={ChangeTextTaskTitle} value={inputText}\r\n            onClick={onclickHandler}/>\r\n            <button onClick={addTask}>add</button>\r\n            {errorInput&&<div >field is empty</div>}\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Task1Type, TaskBlockType} from \"./Types\";\r\n\r\nimport {deleteTaskAC} from \"./Redux/ToDoReducer\";\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const TaskBlock = (props: TaskBlockType) => {\r\n\r\n    const checkTask = (id:string,idTitle:string) => {\r\n        props.callBack(id,idTitle)\r\n    }\r\n\r\n    const deleteTask = (id:string,idTitle:string) => {\r\n        props.dispatch(deleteTaskAC(id,idTitle))\r\n    }\r\n\r\n    const mapTasks= props.tasks.map((taskElem: Task1Type) => {\r\n\r\n\r\n\r\n            return (\r\n                <li key={taskElem.id}>\r\n                    <input type='checkbox'\r\n                           checked={taskElem.isDone}\r\n                           onClick={()=>{checkTask(taskElem.id,props.idTitle)}}\r\n                    />\r\n                    <span>{taskElem.title}</span>\r\n                    <button onClick={()=>{deleteTask(taskElem.id,props.idTitle)}}>x</button>\r\n                </li>\r\n            )\r\n        }\r\n    )\r\n\r\n    return (\r\n        <div>\r\n            <ul>\r\n                {mapTasks}\r\n            </ul>\r\n\r\n\r\n        </div>\r\n\r\n    )\r\n}","import React, {FC} from \"react\";\r\nimport './App.css';\r\n\r\n\r\n\r\ntype ButtonsBlockType={\r\n    filterHandler:(filter:string)=>void\r\n    filter:string\r\n}\r\n\r\nexport const ButtonsBlock:React.FC<ButtonsBlockType> = ({filterHandler,filter}) => {\r\n\r\n\r\n    const onClickHandler = (filter:string) => {\r\n        filterHandler(filter)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <CustomButton onClickHandler={onClickHandler}\r\n                          className={filter==='All'?'activeButton':''}\r\n                          buttonName={'All'}  />\r\n            <CustomButton onClickHandler={onClickHandler}\r\n                          className={filter==='Active'?'activeButton':''}\r\n                          buttonName={'Active'}  />\r\n            <CustomButton onClickHandler={onClickHandler}\r\n                          className={filter==='Completed'?'activeButton':''}\r\n                          buttonName={'Completed'}  />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\ntype CustomButtonPropsType={\r\n    onClickHandler:(buttonName: string)=>void\r\n    buttonName: string\r\n    className:string\r\n}\r\nexport const CustomButton:FC<CustomButtonPropsType> = ({onClickHandler,buttonName,className}) => {\r\n    return(\r\n        <button className={className}\r\n            onClick={()=>onClickHandler(buttonName)}>{buttonName}</button>\r\n    )\r\n\r\n}","import {StateType, taskTitle} from \"./Types\";\r\nimport React, {ChangeEvent, useState} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {checkTaskAC, removeTodoAC, updateTodoNameAC} from \"./Redux/ToDoReducer\";\r\nimport {Input} from \"./Input\";\r\nimport {TaskBlock} from \"./TaskBlock\";\r\nimport {ButtonsBlock} from \"./ButtonsBlock\";\r\n\r\ntype ToDoType = {\r\n    task: taskTitle\r\n    state: StateType\r\n}\r\nexport const ToDo: React.FC<ToDoType> = ({task, state}) => {\r\n\r\n    let dispatch = useDispatch()\r\n\r\n    const onCheckHandler = (id: string, idTitle: string) => dispatch(checkTaskAC(id, idTitle))\r\n\r\n    const [filter, setFilter] = useState<string>('All')\r\n    const [updateTodoMode, setUpdateTodoMode]=useState<boolean>(false)\r\n    const [todoName, setTodoName]=useState<string>('')\r\n\r\n    const todoNameChanger = (e:ChangeEvent<HTMLInputElement>) => {\r\n        setTodoName(e.currentTarget.value)\r\n    }\r\n\r\n    const useSetFilterHandler = (filter: string) => setFilter(filter)\r\n\r\n    const onUpdateTodoMode=()=>setUpdateTodoMode(true)\r\n\r\n    const updateTodoName = () => {\r\n        dispatch(updateTodoNameAC(todoName,task.id))\r\n      setUpdateTodoMode(false)\r\n    }\r\n\r\n    const removeTodo = () => {\r\n      dispatch(removeTodoAC(task.id))\r\n    }\r\n\r\n    return (\r\n        <div key={task.id}>\r\n            {!updateTodoMode?\r\n                <h3 onClick={onUpdateTodoMode}>{task.titleName}</h3>\r\n\r\n                : <input onChange={todoNameChanger} onMouseLeave={updateTodoName} value={todoName}/>}\r\n\r\n                <span><button onClick={removeTodo}>X</button></span>\r\n            <Input dispatch={dispatch}\r\n                   state={state}\r\n\r\n                   idTitle={task.id}\r\n            />\r\n            {state.taskBody[task.id].activeTasks.length === 0 && state.taskBody[task.id].completedTasks.length === 0 &&\r\n                <div>no active and completed tasks</div>}\r\n\r\n            <div>{filter === 'Completed' || 'All' &&\r\n                <TaskBlock idTitle={task.id} tasks={state.taskBody[task.id].activeTasks} callBack={onCheckHandler}\r\n                           dispatch={dispatch}/>}\r\n            </div>\r\n\r\n            <div className={'CompletedTasks'}>{filter === 'Active' || 'All' &&\r\n                <TaskBlock idTitle={task.id} tasks={state.taskBody[task.id].completedTasks} callBack={onCheckHandler}\r\n                           dispatch={dispatch}/>}\r\n            </div>\r\n\r\n            <ButtonsBlock filterHandler={useSetFilterHandler} filter={filter}/>\r\n\r\n        </div>)\r\n}","import React, {useState} from \"react\";\r\nimport './App.css';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {taskTitle} from \"./Types\";\r\nimport {ToDo} from \"./ToDo\";\r\nimport {createNewTodoAC} from \"./Redux/ToDoReducer\";\r\n\r\n\r\nexport const ToDos = () => {\r\n    let state = useSelector((state:any) => state.stateTaskBlock)\r\n    let dispatch=useDispatch()\r\n\r\n    let [todoName, setTodoName]= useState<string>('noName')\r\n\r\n    const onclickHandler = () => {\r\n      dispatch(createNewTodoAC(todoName))\r\n    }\r\n\r\n\r\n    const todos = state.tasksTitle.map((task: taskTitle) => <ToDo key={task.id} task={task} state={state}/>)\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div><button onClick={onclickHandler}>new todo</button></div>\r\n\r\n            <span>{todos}</span>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {ToDos} from \"./Todos\";\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n    return (\r\n            <ToDos />\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./Redux/ReduxStore\";\r\n\r\n\r\n\r\nconst rerenderApp=(store:any)=>{\r\n    ReactDOM.render(\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n\r\n        , document.getElementById('root'));\r\n}\r\n\r\nrerenderApp(store)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {taskBlockReducer} from \"./ToDoReducer\";\r\n\r\n\r\nlet rootReducer= combineReducers({\r\n    stateTaskBlock:taskBlockReducer\r\n})\r\n\r\nexport let store= createStore(rootReducer)"],"sourceRoot":""}